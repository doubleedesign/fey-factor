input WorkFilter {
	type: String
}
input ProviderFilter {
	provider_type: [String]
}
input NodeFilter {
	id: Int
}
input EdgeFilter {
	id: Int
}
type Role {
	id: ID!
	name: String
	episode_count: Int
}
type Person {
	id: ID!
	name: String!
	degree: Int
	works(filter: WorkFilter): [Work]
	roles: [Role]
}
interface Work {
	id: ID!
	title: String!
	ranking_data: RankingData
	providers(filter: ProviderFilter): [Provider]
	overview: String
	poster_path: String
	backdrop_path: String
	people: [Person]
	roles: [Role]
}
type RankingData {
	total_connections: Int
	average_degree: Float
	aggregate_episode_count: Int
	weighted_score: Float
}
type TvShowAdditionalFields {
	poster_path: String
	backdrop_path: String
	overview: String
}
type Provider {
	provider_id: Int!
	provider_name: String!
	logo_path: String
	provider_type: String
}
type VennDiagramIntersection {
	titles: [String!]!
	show_ids: [String!]!
	people_count: Int!
}
type VennDiagramCircle {
	title: String!
	show_id: String!
	people_count: Int!
}
type Edge {
	id: ID!
	title: String!
	nodes(limit: Int): [Node]
}
type Node {
	id: ID!
	name: String!
	degree: Int!
	edges(limit: Int): [Edge]
}
type VennDiagram {
	intersections: [VennDiagramIntersection!]!
	circles: [VennDiagramCircle!]!
}
type Movie implements Work {
	id: ID!
	title: String!
	release_year: Int
	ranking_data: RankingData
	providers(filter: ProviderFilter): [Provider]
	overview: String
	poster_path: String
	backdrop_path: String
	people: [Person]
	roles: [Role]
}
type TvShow implements Work {
	id: ID!
	title: String!
	start_year: Int
	end_year: Int
	season_count: Int
	episode_count: Int
	ranking_data: RankingData
	providers(filter: ProviderFilter): [Provider]
	overview: String
	poster_path: String
	backdrop_path: String
	people: [Person]
	roles: [Role]
}
