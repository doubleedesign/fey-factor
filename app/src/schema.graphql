union TvShowResult = TvShow | TvShowWithRankingData

type Query {
    Movie(id: ID!): Movie
    Movies(ids: [ID], limit: Int): [Movie]
    Person(id: ID!): Person
    People(ids: [ID], limit: Int): [Person]
    Role(id: ID!): Role
    Roles(ids: [ID], limit: Int): [Role]
    TvShow(id: ID!): TvShow
    TvShows(ids: [ID], limit: Int): [TvShowResult]
    Work(id: ID!): Work
    Works(ids: [ID], limit: Int): [Work]
}
input TvShowFilter {
    type: String
}
input WorkFilter {
    type: String
}
type Person {
    id: ID!
    name: String!
    degree: Int
    works(filter: WorkFilter): [Work]
    roles: [Role]
}
type Role {
    id: ID!
    name: String
    episode_count: Int
}
interface Work {
    id: ID!
    title: String
    people: [Person]
    roles: [Role]
}
type Movie implements Work {
    id: ID!
    title: String
    release_year: Int
    people: [Person]
    roles: [Role]
}
type TvShow implements Work {
    id: ID!
    title: String
    start_year: Int
    end_year: Int
    season_count: Int
    episode_count: Int
    people: [Person]
    roles: [Role]
}
type TvShowWithRankingData implements Work {
    id: ID!
    title: String
    start_year: Int
    end_year: Int
    season_count: Int
    episode_count: Int
    total_connections: Int
    average_degree: Float
    aggregate_episode_count: Int
    weighted_score: Float!
    people: [Person]
    roles: [Role]
}
