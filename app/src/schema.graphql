type Query {
	Movie(id: ID!): Movie
	Movies(ids: [ID], limit: Int): [Movie]
	Person(id: ID!): Person
	People(ids: [ID], limit: Int): [Person]
	Role(id: ID!): Role
	Roles(ids: [ID], limit: Int): [Role]
	TvShow(id: ID!): TvShow
	TvShows(ids: [ID], limit: Int): [TvShow]
	Work(id: ID!): Work
	Works(ids: [ID], limit: Int): [Work]
}input WorkFilter {
	type: String
}
type Person {
	id: ID!
	name: String!
	degree: Int
	works(filter: WorkFilter): [Work]
	roles: [Role]
}
type Role {
	id: ID!
	name: String
	episode_count: Int
}
interface Work {
	id: ID!
	title: String
	rankingData: RankingData
	providers: [Provider]
	people: [Person]
	roles: [Role]
}
type RankingData {
	total_connections: Int
	average_degree: Float
	aggregate_episode_count: Int
	weighted_score: Float
}
type Provider {
	provider_id: Int!
	provider_name: String!
	logo_path: String
	provider_type: String
}
type Movie implements Work {
	id: ID!
	title: String
	release_year: Int
	rankingData: RankingData
	providers: [Provider]
	people: [Person]
	roles: [Role]
}
type TvShow implements Work {
	id: ID!
	title: String
	start_year: Int
	end_year: Int
	season_count: Int
	episode_count: Int
	rankingData: RankingData
	providers: [Provider]
	people: [Person]
	roles: [Role]
}
